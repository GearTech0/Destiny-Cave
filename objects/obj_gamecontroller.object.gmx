<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Global Enums
set_globalstate();  

choice = 0;
choosing = true;

ingame = false;

state = globalStates.ingame;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check For States
normal_getKeys();
switch(state){
    case globalStates.menu: menu_normal();break;
    case globalStates.ingame:ingame_normal();break;
    case globalStates.win: break;
    case globalStates.lose: break;
    case globalStates.pause:global_pause();break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hpx;
var hpy;
var hpxx;
var hpyy;

var uix, uiy;

var sprhpx, sprhpy;
var sprwpnx, sprwpny;

hpx = 16; hpy = view_hview[0]-32; 
hpxx = hpx + 150; hpyy = hpy+16;

uix = view_wview[0]-30; uiy = view_hview[0]-30;

sprhpx = 48; sprhpy = 48;
sprwpnx = sprhpx+28; sprwpny = sprhpy+28;

if(state == globalStates.ingame)
{
    draw_set_font(font_test);
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    //draw heart bar
    draw_sprite(spr_health, global.maxhp-global.hp, sprhpx, sprhpy);
    if(global.armour ==0)
        draw_sprite(spr_armour, 1, sprhpx-28, sprhpy+28);
    else
    {
        draw_sprite(spr_armour, 0, sprhpx-28, sprhpy+28);
        draw_set_font(fontguismall);
        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text(sprhpx-28, sprhpy+28, string(global.armour));
    }
    //draw weapon choice
    draw_sprite(spr_weapons, global.activeitem, sprwpnx, sprwpny);
}
if(state == globalStates.pause)
{
    draw_set_alpha(0.4);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, view_wview[0], view_hview[0], false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_set_font(fontgui);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(view_wview[0]/2, view_hview[0]/2, "TAKING A BREAK?");
    draw_set_font(fontguismall);
    draw_text(view_wview[0]/2, (view_hview[0]/2)+32, ptext);
}
if(keystats)
{
    draw_set_font(fontguismall);
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    draw_set_alpha(0.5);
    //draw UI
    draw_set_colour(c_black);
    draw_rectangle(view_wview[0] - 300, view_hview[0]-300, uix, uiy, false);
    draw_set_colour(c_white);
    //draw_rectangle(0, view_hview[0]-80, uix, uiy, true);
    //draw_text(hpx, hpy-36, "Health: ");
    
    //draw test information
    draw_set_alpha(1);
    draw_text(view_wview[0] - 280, view_hview[0]-300, "State: "+string(state));
    draw_text(view_wview[0] - 280, view_hview[0]-280, "X: " + string(obj_player.x) + " Y: " + string(obj_player.y));
    draw_text(view_wview[0] - 280, view_hview[0]-244, "Active Item: "+string(global.activeitem));
    draw_text(view_wview[0] - 280, view_hview[0]-228, "EnemyHP: " + string(obj_enemy.hp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
